#!/bin/sh

LABEL=boot2docker-data
MAGIC="boot2docker, please format-me"
UNPARTITIONED_HD=/dev/sda

# Function to mount the data partition
mount_data_partition() {
    PARTNAME=`echo "$BOOT2DOCKER_DATA" | sed 's/.*\///'`
    echo "mount p:$PARTNAME ..."
    mkdir -p /mnt/$PARTNAME
    if ! mount $BOOT2DOCKER_DATA /mnt/$PARTNAME 2>/dev/null; then
        # for some reason, mount doesn't like to modprobe btrfs
        BOOT2DOCKER_FSTYPE=`blkid -o export $BOOT2DOCKER_DATA | grep TYPE= | cut -d= -f2`
        modprobe $BOOT2DOCKER_FSTYPE || true
        umount -f /mnt/$PARTNAME || true
        mount $BOOT2DOCKER_DATA /mnt/$PARTNAME
    fi

    # Just in case, the links will fail if not
    umount -f /var/lib/docker || true
    rm -rf /var/lib/docker /var/lib/boot2docker /etc/docker /var/lib/minishift

    # Detected a disk with a normal linux install (/var/lib/docker + more))
    if [ ! -d "/var/lib" ]; then
        mkdir -p /var/lib
    fi

#    mkdir -p /mnt/$PARTNAME/var/lib/docker
#    ln -s /mnt/$PARTNAME/var/lib/docker /var/lib/docker

    mkdir -p /mnt/$PARTNAME/var/lib/boot2docker
    ln -s /mnt/$PARTNAME/var/lib/boot2docker /var/lib/boot2docker

    mkdir -p /mnt/$PARTNAME/var/lib/boot2docker/etc/docker
    ln -s /mnt/$PARTNAME/var/lib/boot2docker/etc/docker /etc/docker

    mkdir -p /mnt/$PARTNAME/var/lib/minishift
    ln -s /mnt/$PARTNAME/var/lib/minishift /var/lib/minishift

    # Make sure /tmp is on the disk too
    rm -rf /mnt/$PARTNAME/tmp || true
    mv /tmp /mnt/$PARTNAME/tmp
    ln -fs /mnt/$PARTNAME/tmp /tmp

    # Move userdata to persistent storage
    if [ -e "/userdata.tar" ]; then
        mv /userdata.tar /var/lib/boot2docker/
    fi

    ls -l /mnt/$PARTNAME
}

# Function to partion and format the data disk
prepare_data_partion() {
    # Create the partition, format it and then mount it
    echo "NEW boot2docker managed disk image ($UNPARTITIONED_HD): formatting it for use"

    # Add a swap partition (so Docker doesn't complain about it missing)
    (echo n; echo p; echo 2; echo ; echo +1000M ; echo w) | fdisk $UNPARTITIONED_HD
    # Let kernel re-read partition table
    partprobe

    (echo t; echo 82; echo w) | fdisk $UNPARTITIONED_HD
    # Let kernel re-read partition table
    partprobe
    # wait for the partition to actually exist, timeout after about 5 seconds
    local timer=0
    while [ "$timer" -lt 10 -a ! -b "${UNPARTITIONED_HD}2" ]; do
    	timer=$((timer + 1))
        sleep 0.5
    done

    # Activate the swap partition
    mkswap "${UNPARTITIONED_HD}2"

    # Add the lvm partition
    (echo n; echo p; echo 1; echo ; echo ; echo t; echo 1; echo 8e; echo w) | fdisk $UNPARTITIONED_HD
    # Let kernel re-read partition table
    partprobe
    # wait for the partition to actually exist, timeout after about 5 seconds
    timer=0
    while [ "$timer" -lt 10 -a ! -b "${UNPARTITIONED_HD}1" ]; do
    	timer=$((timer + 1))
        sleep 0.5
    done
    
    BOOT2DOCKER_LVM=`echo "${UNPARTITIONED_HD}1"`
    vgcreate -y mini_vg $BOOT2DOCKER_LVM
    lvcreate -L 4G -ndata mini_vg
    mkfs.ext4 -L $LABEL /dev/mini_vg/data
    swapon "${UNPARTITIONED_HD}2"
    echo "VG=mini_vg" >> /etc/sysconfig/docker-storage-setup
    docker-storage-setup
}

# Function to extract userdata.tar containing the ssh keys into the home directory /home/docker
handle_user_data() {
	# Extract the userdata into docker user home directory
	if [ -e "/var/lib/boot2docker/userdata.tar" ]; then
		tar xf /var/lib/boot2docker/userdata.tar -C /home/docker/ > /var/log/userdata.log 2>&1
    	rm -f '/home/docker/boot2docker, please format-me'
		chown -R docker:docker /home/docker/.ssh
	else
		echo "Unable to find userdata.tar"
		exit 1
	fi
}

# TODO Need to make sure to have /sbin on the PATH. Is there a better way?
# http://stackoverflow.com/questions/19983710/some-commands-not-wroking-on-remote-servers-through-ssh-shell
# https://github.com/LalatenduMohanty/centos-live-iso/issues/11
echo 'PATH=$PATH:/sbin' >> /home/docker/.bashrc

# If there is a partition with `boot2docker-data` as its label we are dealing with
# an already bootstrapped docker-machine. Just make sure to mount data partition and to unpack
# userdata.tar. Remember, /home/docker is not persistent
BOOT2DOCKER_DATA=`blkid -o device -l -t LABEL=$LABEL`
if [ -n "$BOOT2DOCKER_DATA" ]; then
	mount_data_partition
	handle_user_data
	exit 0
fi

# Test for our magic string (it means that the disk was made by ./boot2docker init)
HEADER=`dd if=$UNPARTITIONED_HD bs=1 count=${#MAGIC} 2>/dev/null`
if [ "$HEADER" = "$MAGIC" ]; then
	# Read /userdata.tar with ssh keys and place it temporarily under /
	dd if=/dev/sda of=/userdata.tar bs=1 count=4096 2>/dev/null

    prepare_data_partion
    mount_data_partition
    handle_user_data
fi
